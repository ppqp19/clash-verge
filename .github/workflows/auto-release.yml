name: Auto Release (Multi-Platform)

on:
  push:
    tags:
      - "v*-auto"
      - "v*-build-*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bundles: "deb,appimage"
            name: "Linux"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundles: "nsis"
            name: "Windows"
          - os: macos-latest
            target: universal-apple-darwin
            bundles: "dmg"
            name: "macOS"

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
        
      - name: Install project dependencies
        run: pnpm install
        
      - name: Prebuild (download cores)
        run: pnpm run prebuild
        
      - name: Build ${{ matrix.name }} packages
        run: pnpm tauri build --bundles ${{ matrix.bundles }} --target ${{ matrix.target }}
        
      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=development" >> $GITHUB_OUTPUT
          fi
        
      - name: Upload ${{ matrix.name }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-build
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/*/*
            !src-tauri/target/${{ matrix.target }}/release/bundle/*/*.app
            !src-tauri/target/${{ matrix.target }}/release/bundle/*/Clash*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Get version from tag
        id: get_version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=development" >> $GITHUB_OUTPUT
          fi
        
      - name: Create Multi-Platform Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: 'Clash Verge Rev ${{ steps.get_version.outputs.VERSION }} (Multi-Platform)'
          body: |
            🎉 Multi-Platform Auto-Built Release
            
            ## 📦 Available Downloads
            
            ### 🐧 Linux
            - **clash-verge_amd64.deb** - For Ubuntu/Debian systems
            - **clash-verge_amd64.AppImage** - Universal Linux package
            
            ### 🪟 Windows  
            - **clash-verge_x64-setup.exe** - Windows installer
            
            ### 🍎 macOS
            - **clash-verge_universal.dmg** - Universal macOS package (Intel + Apple Silicon)
            
            ## 🚀 Installation Instructions
            
            ### Linux (DEB)
            ```bash
            sudo dpkg -i *.deb
            sudo apt-get install -f  # Fix dependencies if needed
            ```
            
            ### Linux (AppImage)
            ```bash
            chmod +x *.AppImage
            ./*.AppImage
            ```
            
            ### Windows
            Just run the `.exe` installer
            
            ### macOS
            Open the `.dmg` file and drag the app to Applications folder
            
            ---
            Built automatically with GitHub Actions 🤖
          files: |
            Linux-build/**/*
            Windows-build/**/*
            macOS-build/**/*
