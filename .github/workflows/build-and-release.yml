name: Build and Release

on:
  push:
    tags:
      - "v*-build-*"
      - "v*-auto"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            rust-target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            rust-target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            rust-target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            rust-target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: pnpm install

      - name: Run prebuild with cross-platform timeout
        shell: bash
        run: |
          # Cross-platform timeout function
          run_with_timeout() {
            local timeout_duration=600
            local command="$1"
            
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              # Windows doesn't have timeout command, use PowerShell
              powershell -Command "& { Start-Process -FilePath 'cmd' -ArgumentList '/c', '$command' -Wait -TimeoutSec $timeout_duration }"
            else
              # Unix-like systems
              timeout $timeout_duration bash -c "$command"
            fi
          }
          
          # Retry prebuild up to 3 times
          for i in {1..3}; do
            echo "Prebuild attempt $i"
            if run_with_timeout "pnpm run prebuild"; then
              echo "Prebuild successful"
              break
            else
              echo "Prebuild attempt $i failed, retrying..."
              sleep 10
            fi
            if [ $i -eq 3 ]; then
              echo "All prebuild attempts failed"
              exit 1
            fi
          done

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'Clash Verge Rev v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
