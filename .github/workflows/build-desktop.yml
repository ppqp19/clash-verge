name: Build Desktop Release

on:
  push:
    tags:
      - "v*-build-*"
      - "v*-auto"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'Linux'
          - platform: 'windows-latest'
            args: ''
            name: 'Windows'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            name: 'macOS-Intel'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            name: 'macOS-ARM'

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 60
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev xdg-utils

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ contains(matrix.args, 'target') && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Run prebuild with retry
        shell: bash
        run: |
          for i in {1..5}; do
            echo "üîÑ Prebuild attempt $i/5..."
            if timeout 600 pnpm run prebuild; then
              echo "‚úÖ Prebuild succeeded on attempt $i"
              break
            else
              if [ $i -eq 5 ]; then
                echo "‚ùå Prebuild failed after 5 attempts"
                exit 1
              fi
              echo "‚ö†Ô∏è Prebuild attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Build app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'Clash Verge Rev v__VERSION__'
          releaseBody: |
            üéâ Desktop Release for Windows, macOS, and Linux
            
            ## Downloads
            - **Windows**: `.exe` installer
            - **macOS Intel**: `.dmg` for Intel Macs  
            - **macOS ARM**: `.dmg` for Apple Silicon Macs (M1/M2/M3)
            - **Linux**: `.deb` and `.AppImage` packages
            
            ## Installation
            - Windows: Run the `.exe` file
            - macOS: Open `.dmg` and drag to Applications
            - Linux: `sudo dpkg -i *.deb` or `chmod +x *.AppImage && ./*.AppImage`
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
